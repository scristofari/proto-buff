// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poll.proto

package poll

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Poll struct {
	Title                string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Id                   int64                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	LastModified         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Poll) Reset()         { *m = Poll{} }
func (m *Poll) String() string { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()    {}
func (*Poll) Descriptor() ([]byte, []int) {
	return fileDescriptor_poll_573d6b63ab7477b5, []int{0}
}
func (m *Poll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Poll.Unmarshal(m, b)
}
func (m *Poll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Poll.Marshal(b, m, deterministic)
}
func (dst *Poll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poll.Merge(dst, src)
}
func (m *Poll) XXX_Size() int {
	return xxx_messageInfo_Poll.Size(m)
}
func (m *Poll) XXX_DiscardUnknown() {
	xxx_messageInfo_Poll.DiscardUnknown(m)
}

var xxx_messageInfo_Poll proto.InternalMessageInfo

func (m *Poll) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Poll) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Poll) GetLastModified() *timestamp.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

type PollRequest struct {
	Id                   int64    `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollRequest) Reset()         { *m = PollRequest{} }
func (m *PollRequest) String() string { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()    {}
func (*PollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_poll_573d6b63ab7477b5, []int{1}
}
func (m *PollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollRequest.Unmarshal(m, b)
}
func (m *PollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollRequest.Marshal(b, m, deterministic)
}
func (dst *PollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollRequest.Merge(dst, src)
}
func (m *PollRequest) XXX_Size() int {
	return xxx_messageInfo_PollRequest.Size(m)
}
func (m *PollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollRequest proto.InternalMessageInfo

func (m *PollRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TickerResponse struct {
	Tick                 string   `protobuf:"bytes,6,opt,name=tick,proto3" json:"tick,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TickerResponse) Reset()         { *m = TickerResponse{} }
func (m *TickerResponse) String() string { return proto.CompactTextString(m) }
func (*TickerResponse) ProtoMessage()    {}
func (*TickerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_poll_573d6b63ab7477b5, []int{2}
}
func (m *TickerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TickerResponse.Unmarshal(m, b)
}
func (m *TickerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TickerResponse.Marshal(b, m, deterministic)
}
func (dst *TickerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickerResponse.Merge(dst, src)
}
func (m *TickerResponse) XXX_Size() int {
	return xxx_messageInfo_TickerResponse.Size(m)
}
func (m *TickerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TickerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TickerResponse proto.InternalMessageInfo

func (m *TickerResponse) GetTick() string {
	if m != nil {
		return m.Tick
	}
	return ""
}

func init() {
	proto.RegisterType((*Poll)(nil), "poll.Poll")
	proto.RegisterType((*PollRequest)(nil), "poll.PollRequest")
	proto.RegisterType((*TickerResponse)(nil), "poll.TickerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PollServerClient is the client API for PollServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PollServerClient interface {
	Get(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*Poll, error)
	Ticker(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PollServer_TickerClient, error)
}

type pollServerClient struct {
	cc *grpc.ClientConn
}

func NewPollServerClient(cc *grpc.ClientConn) PollServerClient {
	return &pollServerClient{cc}
}

func (c *pollServerClient) Get(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*Poll, error) {
	out := new(Poll)
	err := c.cc.Invoke(ctx, "/poll.PollServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServerClient) Ticker(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PollServer_TickerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PollServer_serviceDesc.Streams[0], "/poll.PollServer/Ticker", opts...)
	if err != nil {
		return nil, err
	}
	x := &pollServerTickerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PollServer_TickerClient interface {
	Recv() (*TickerResponse, error)
	grpc.ClientStream
}

type pollServerTickerClient struct {
	grpc.ClientStream
}

func (x *pollServerTickerClient) Recv() (*TickerResponse, error) {
	m := new(TickerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PollServerServer is the server API for PollServer service.
type PollServerServer interface {
	Get(context.Context, *PollRequest) (*Poll, error)
	Ticker(*empty.Empty, PollServer_TickerServer) error
}

func RegisterPollServerServer(s *grpc.Server, srv PollServerServer) {
	s.RegisterService(&_PollServer_serviceDesc, srv)
}

func _PollServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poll.PollServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServerServer).Get(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollServer_Ticker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PollServerServer).Ticker(m, &pollServerTickerServer{stream})
}

type PollServer_TickerServer interface {
	Send(*TickerResponse) error
	grpc.ServerStream
}

type pollServerTickerServer struct {
	grpc.ServerStream
}

func (x *pollServerTickerServer) Send(m *TickerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PollServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poll.PollServer",
	HandlerType: (*PollServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PollServer_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ticker",
			Handler:       _PollServer_Ticker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "poll.proto",
}

func init() { proto.RegisterFile("poll.proto", fileDescriptor_poll_573d6b63ab7477b5) }

var fileDescriptor_poll_573d6b63ab7477b5 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x49, 0x1a, 0x0b, 0x4e, 0xff, 0x88, 0x43, 0x95, 0x10, 0x15, 0x4b, 0xf0, 0xd0, 0x53,
	0xa2, 0xf5, 0xe8, 0xc1, 0x93, 0x78, 0x51, 0x90, 0xd8, 0xbb, 0xa4, 0xcd, 0xb4, 0x2c, 0xdd, 0x64,
	0x63, 0x32, 0x2d, 0x78, 0xf5, 0x15, 0x3c, 0xf8, 0x60, 0xbe, 0x82, 0x0f, 0x22, 0xbb, 0x9b, 0xe0,
	0xbf, 0xdb, 0xec, 0xcc, 0x7c, 0xbf, 0xef, 0xdb, 0x01, 0x28, 0x95, 0x94, 0x51, 0x59, 0x29, 0x56,
	0xe8, 0xe9, 0x3a, 0x38, 0x5d, 0x29, 0xb5, 0x92, 0x14, 0x9b, 0xde, 0x7c, 0xb3, 0x8c, 0x59, 0xe4,
	0x54, 0x73, 0x9a, 0x97, 0x76, 0x2d, 0x38, 0x6e, 0x16, 0xd2, 0x52, 0xc4, 0x69, 0x51, 0x28, 0x4e,
	0x59, 0xa8, 0xa2, 0x6e, 0xa6, 0x47, 0x7f, 0xe5, 0x37, 0x79, 0xc9, 0x2f, 0x76, 0x18, 0xe6, 0xe0,
	0x3d, 0x28, 0x29, 0x71, 0x04, 0x3b, 0x2c, 0x58, 0x92, 0xef, 0x8c, 0x9d, 0xc9, 0x6e, 0x62, 0x1f,
	0x38, 0x04, 0x57, 0x64, 0xbe, 0x3b, 0x76, 0x26, 0x9d, 0xc4, 0x15, 0x19, 0x5e, 0xc3, 0x40, 0xa6,
	0x35, 0x3f, 0xe5, 0x2a, 0x13, 0x4b, 0x41, 0x99, 0xdf, 0x19, 0x3b, 0x93, 0xde, 0x34, 0x88, 0xac,
	0x45, 0xd4, 0x5a, 0x44, 0xb3, 0x36, 0x61, 0xd2, 0xd7, 0x82, 0xfb, 0x66, 0x3f, 0x3c, 0x81, 0x9e,
	0xb6, 0x4b, 0xe8, 0x79, 0x43, 0x35, 0x37, 0x7c, 0xaf, 0xe5, 0x87, 0x67, 0x30, 0x9c, 0x89, 0xc5,
	0x9a, 0xaa, 0x84, 0xea, 0x52, 0x15, 0x35, 0x21, 0x82, 0xc7, 0x62, 0xb1, 0xf6, 0xbb, 0x26, 0x96,
	0xa9, 0xa7, 0xef, 0x0e, 0x80, 0xa6, 0x3c, 0x52, 0xb5, 0xa5, 0x0a, 0xaf, 0xa0, 0x73, 0x4b, 0x8c,
	0xfb, 0x91, 0x39, 0xdc, 0x0f, 0x7c, 0x00, 0xdf, 0xad, 0xf0, 0xe0, 0xf5, 0xe3, 0xf3, 0xcd, 0xdd,
	0xc3, 0x41, 0xbc, 0xbd, 0x88, 0x75, 0x3b, 0x66, 0x9d, 0xe0, 0x0e, 0xba, 0xd6, 0x11, 0x0f, 0xff,
	0x7d, 0xc2, 0xdc, 0x29, 0x18, 0x59, 0xc8, 0xef, 0x5c, 0x21, 0x1a, 0x5c, 0x1f, 0x41, 0xe3, 0xd8,
	0xcc, 0xce, 0x9d, 0x79, 0xd7, 0x68, 0x2f, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x7d, 0x89,
	0x76, 0xc4, 0x01, 0x00, 0x00,
}
